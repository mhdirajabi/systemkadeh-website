version: "3.8"

services:
  db:
    image: postgres:16-alpine
    container_name: systemkadeh_postgres_prod
    restart: unless-stopped
    env_file:
      - ../.env.prod
    environment:
      POSTGRES_DB: systemkadeh_db
      POSTGRES_USER: systemkadeh_db_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./postgres/backups:/backups
    networks:
      - systemkadeh_net
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U systemkadeh_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.0-alpine
    ports:
      - "6379:6379"
    container_name: systemkadeh_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1
    volumes:
      - redis_data_prod:/data
    networks:
      - systemkadeh_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s

  migrations:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    command: sh -c "python manage.py makemigrations && python manage.py migrate"
    depends_on:
      - db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
    restart: on-failure

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: systemkadeh_backend_prod
    env_file:
      - ../.env.prod
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./logs/backend:/app/logs
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 512M
    networks:
      - systemkadeh_net
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: systemkadeh_celery_prod
    command: celery -A ecommerce worker --loglevel=info --concurrency=4
    env_file:
      - ../.env.prod
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    depends_on:
      - redis
      - backend
    networks:
      - systemkadeh_net

  celery_beat:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
    container_name: systemkadeh_celery_beat_prod
    command: celery -A ecommerce beat --loglevel=info
    env_file:
      - ../.env.prod
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
    depends_on:
      - redis
      - backend
    networks:
      - systemkadeh_net

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    container_name: systemkadeh_frontend_prod
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api # HTTPS for prod
      - NEXT_TELEMETRY_DISABLED=1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - systemkadeh_net
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  certbot:
    image: certbot/certbot
    container_name: systemkadeh_certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - systemkadeh_net
    depends_on:
      - nginx

  nginx:
    image: nginx:alpine
    container_name: systemkadeh_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ./docker/nginx:/etc/nginx/conf.d
      - static_volume:/usr/share/nginx/html
    networks:
      - systemkadeh_net
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - backend
      - frontend

networks:
  systemkadeh_net:
    driver: bridge
    name: systemkadeh_prod_net

volumes:
  postgres_data_prod:
  redis_data_prod:
  static_volume:
  media_volume:
